{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nexport class ErrorCatchingInterceptor {\n  constructor() {}\n  intercept(request, next) {\n    console.log(\"Passed through the interceptor in request\");\n    return next.handle(request).pipe(map(res => {\n      return res;\n    }), catchError(error => {\n      let errorMsg = '';\n      if (error.status == 400) {\n        console.log('client error');\n      } else if (error.status == 500) {\n        console.log(\"server err\");\n      } else {\n        console.log(errorMsg);\n      }\n      return throwError(errorMsg);\n    }));\n  }\n  static #_ = this.ɵfac = function ErrorCatchingInterceptor_Factory(t) {\n    return new (t || ErrorCatchingInterceptor)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorCatchingInterceptor,\n    factory: ErrorCatchingInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAoBA,UAAU,QAAO,MAAM;AAC3C,SAAQC,UAAU,EAAEC,GAAG,QAAO,gBAAgB;;AAG9C,OAAM,MAAOC,wBAAwB;EAErCC,eACA;EAEAC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IAC1DC,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IAEnD,OAAOF,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC,CACpBK,IAAI,CACCT,GAAG,CAACU,GAAG,IAAG;MACP,OAAOA,GAAG;IACb,CAAC,CAAC,EACFX,UAAU,CAAEY,KAAwB,IAAI;MACrC,IAAIC,QAAQ,GAAG,EAAE;MACjB,IAAGD,KAAK,CAACE,MAAM,IAAI,GAAG,EAAE;QACpBP,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;OAC9B,MAAM,IAAII,KAAK,CAACE,MAAM,IAAI,GAAG,EAAE;QAC5BP,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;OAC5B,MAAM;QACHD,OAAO,CAACC,GAAG,CAACK,QAAQ,CAAC;;MAEzB,OAAOd,UAAU,CAACc,QAAQ,CAAC;IAC9B,CAAC,CAAC,CACP;EACZ;EAAC;qBAzBYX,wBAAwB;EAAA;EAAA;WAAxBA,wBAAwB;IAAAa,SAAxBb,wBAAwB;EAAA","names":["throwError","catchError","map","ErrorCatchingInterceptor","constructor","intercept","request","next","console","log","handle","pipe","res","error","errorMsg","status","factory"],"sourceRoot":"","sources":["/home/luiza/Documents/proiectDBnou/Angular/src/app/interceptor/error-catching-interceptor.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, map} from \"rxjs/operators\";\n\n@Injectable()\nexport class ErrorCatchingInterceptor implements HttpInterceptor {\n\nconstructor() {\n}\n\nintercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\nconsole.log(\"Passed through the interceptor in request\");\n\n     return next.handle(request)\n           .pipe(\n                 map(res => {\n                    return res\n                 }),\n                 catchError((error: HttpErrorResponse) => {\n                    let errorMsg = '';\n                    if(error.status == 400) {\n                        console.log('client error');\n                    } else if (error.status == 500) {\n                        console.log(\"server err\")\n                    } else {\n                        console.log(errorMsg);\n                    }\n                    return throwError(errorMsg);\n                 })\n           )\n}\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}