{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SupplyService {\n  constructor(http) {\n    this.http = http;\n    this.suppliesUrl = 'http://localhost:8080/supplies'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET supplies from the server */\n  getSupplies() {\n    return this.http.get(this.suppliesUrl).pipe(catchError(this.handleError('getSupplies', [])));\n  }\n  /** GET supply by id. Will 404 if id not found */\n  getSupply(id) {\n    const url = `${this.suppliesUrl}/${id}`;\n    return this.http.get(url).pipe(catchError(this.handleError(`getSupplies id=${id}`)));\n  }\n  //////// Save methods //////////\n  /** POST: add a new supply to the server */\n  addSupply(supply) {\n    supply.date_supply.setHours(supply.date_supply.getHours() + 5);\n    return this.http.post(this.suppliesUrl, supply, this.httpOptions).pipe(catchError(this.handleError('addSupply')));\n  }\n  /** DELETE: delete the supply from the server */\n  deleteSupply(id) {\n    const url = `${this.suppliesUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(catchError(this.handleError('deleteSupply')));\n  }\n  /** PUT: update the Supply on the server */\n  updateSupply(supply) {\n    return this.http.put(this.suppliesUrl, supply, this.httpOptions).pipe(catchError(this.handleError('updateSupply')));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function SupplyService_Factory(t) {\n    return new (t || SupplyService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SupplyService,\n    factory: SupplyService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAkB,gBAAgB;;;AAMrD,OAAM,MAAOC,aAAa;EAQxBC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAPN,gBAAW,GAAG,gCAAgC,CAAC,CAAE;IAEzD,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIN,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAG6B;EAE9B;EACAO,WAAW;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAW,IAAI,CAACC,WAAW,CAAC,CAC7CC,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAW,aAAa,EAAE,EAAE,CAAC,CAAC,CAC1D;EACL;EAEA;EACAC,SAAS,CAACC,EAAU;IAClB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,WAAW,IAAII,EAAE,EAAE;IACvC,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAASM,GAAG,CAAC,CAACJ,IAAI,CACpCR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAS,kBAAkBE,EAAE,EAAE,CAAC,CAAC,CAC7D;EACH;EAEA;EAEA;EACAE,SAAS,CAACC,MAAc;IACtBA,MAAM,CAACC,WAAW,CAACC,QAAQ,CAACF,MAAM,CAACC,WAAW,CAACE,QAAQ,EAAE,GAAC,CAAC,CAAC;IAE5D,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAS,IAAI,CAACX,WAAW,EAAEO,MAAM,EAAE,IAAI,CAACK,WAAW,CAAC,CAACX,IAAI,CAC5ER,UAAU,CAAC,IAAI,CAACS,WAAW,CAAS,WAAW,CAAC,CAAC,CAClD;EACH;EAEA;EACAW,YAAY,CAACT,EAAU;IACrB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,WAAW,IAAII,EAAE,EAAE;IAEvC,OAAO,IAAI,CAACR,IAAI,CAACkB,MAAM,CAAST,GAAG,EAAE,IAAI,CAACO,WAAW,CAAC,CAACX,IAAI,CACzDR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAS,cAAc,CAAC,CAAC,CACrD;EACH;EAEA;EACAa,YAAY,CAACR,MAAc;IACzB,OAAO,IAAI,CAACX,IAAI,CAACoB,GAAG,CAAC,IAAI,CAAChB,WAAW,EAAEO,MAAM,EAAE,IAAI,CAACK,WAAW,CAAC,CAACX,IAAI,CACnER,UAAU,CAAC,IAAI,CAACS,WAAW,CAAM,cAAc,CAAC,CAAC,CAClD;EACH;EAEA;;;;;;;EAOQA,WAAW,CAAIe,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MAEA;MACA,OAAO3B,EAAE,CAAC0B,MAAW,CAAC;IACxB,CAAC;EACH;EAAC;qBAxEUxB,aAAa;EAAA;EAAA;WAAbA,aAAa;IAAA2B,SAAb3B,aAAa;IAAA4B,YADA;EAAM","names":["HttpHeaders","of","catchError","SupplyService","constructor","http","headers","getSupplies","get","suppliesUrl","pipe","handleError","getSupply","id","url","addSupply","supply","date_supply","setHours","getHours","post","httpOptions","deleteSupply","delete","updateSupply","put","operation","result","error","console","factory","providedIn"],"sourceRoot":"","sources":["/home/luiza/Documents/proiectDBnou/Angular/src/app/services/supply.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Supply } from '../model/supply';\n\n\n@Injectable({ providedIn: 'root' })\nexport class SupplyService {\n\n  private suppliesUrl = 'http://localhost:8080/supplies';  // URL to web api\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient) { }\n\n  /** GET supplies from the server */\n  getSupplies(): Observable<Supply[]> {\n    return this.http.get<Supply[]>(this.suppliesUrl)\n      .pipe(\n        catchError(this.handleError<Supply[]>('getSupplies', []))\n      );\n  }\n\n  /** GET supply by id. Will 404 if id not found */\n  getSupply(id: number): Observable<Supply> {\n    const url = `${this.suppliesUrl}/${id}`;\n    return this.http.get<Supply>(url).pipe(\n      catchError(this.handleError<Supply>(`getSupplies id=${id}`))\n    );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add a new supply to the server */\n  addSupply(supply: Supply): Observable<Supply> {\n    supply.date_supply.setHours(supply.date_supply.getHours()+5);\n\n    return this.http.post<Supply>(this.suppliesUrl, supply, this.httpOptions).pipe(\n      catchError(this.handleError<Supply>('addSupply'))\n    );\n  }\n\n  /** DELETE: delete the supply from the server */\n  deleteSupply(id: number): Observable<Supply> {\n    const url = `${this.suppliesUrl}/${id}`;\n\n    return this.http.delete<Supply>(url, this.httpOptions).pipe(\n      catchError(this.handleError<Supply>('deleteSupply'))\n    );\n  }\n\n  /** PUT: update the Supply on the server */\n  updateSupply(supply: Supply): Observable<any> {\n    return this.http.put(this.suppliesUrl, supply, this.httpOptions).pipe(\n      catchError(this.handleError<any>('updateSupply'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}