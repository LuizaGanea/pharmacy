{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MedicineService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:8080/medicines'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET clients from the server */\n  getMedicines() {\n    return this.http.get(this.url).pipe(catchError(this.handleError('getMedicines', [])));\n  }\n  //////// Save methods //////////\n  /** POST: add a new client to the server */\n  addMedicine(med) {\n    return this.http.post(this.url, med, this.httpOptions).pipe(catchError(this.handleError('addMedicine')));\n  }\n  /** DELETE: delete the client from the server */\n  deleteMedicine(id) {\n    const url = `${this.url}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(catchError(this.handleError('deleteMedicine')));\n  }\n  /** PUT: update the client on the server */\n  updateMedicine(med) {\n    return this.http.put(this.url, med, this.httpOptions).pipe(catchError(this.handleError('updateMedicine')));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function MedicineService_Factory(t) {\n    return new (t || MedicineService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MedicineService,\n    factory: MedicineService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAkB,gBAAgB;;;AAMrD,OAAM,MAAOC,eAAe;EAQ1BC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAPN,QAAG,GAAG,iCAAiC,CAAC,CAAE;IAElD,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIN,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAG6B;EAE9B;EACAO,YAAY;IACV,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,IAAI,CAACC,GAAG,CAAC,CACvCC,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAa,cAAc,EAAE,EAAE,CAAC,CAAC,CAC7D;EACL;EAGA;EAEA;EACAC,WAAW,CAACC,GAAa;IACvB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAW,IAAI,CAACL,GAAG,EAAEI,GAAG,EAAE,IAAI,CAACE,WAAW,CAAC,CAACL,IAAI,CACnER,UAAU,CAAC,IAAI,CAACS,WAAW,CAAW,aAAa,CAAC,CAAC,CACtD;EACH;EAEA;EACAK,cAAc,CAACC,EAAU;IACvB,MAAMR,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,IAAIQ,EAAE,EAAE;IAE/B,OAAO,IAAI,CAACZ,IAAI,CAACa,MAAM,CAAWT,GAAG,EAAE,IAAI,CAACM,WAAW,CAAC,CAACL,IAAI,CAC3DR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAW,gBAAgB,CAAC,CAAC,CACzD;EACH;EAEA;EACAQ,cAAc,CAACN,GAAa;IAC1B,OAAO,IAAI,CAACR,IAAI,CAACe,GAAG,CAAC,IAAI,CAACX,GAAG,EAAEI,GAAG,EAAE,IAAI,CAACE,WAAW,CAAC,CAACL,IAAI,CACxDR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAM,gBAAgB,CAAC,CAAC,CACpD;EACH;EAEA;;;;;;;EAOQA,WAAW,CAAIU,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MAEA;MACA,OAAOtB,EAAE,CAACqB,MAAW,CAAC;IACxB,CAAC;EACH;EAAC;qBA/DUnB,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAsB,SAAftB,eAAe;IAAAuB,YADF;EAAM","names":["HttpHeaders","of","catchError","MedicineService","constructor","http","headers","getMedicines","get","url","pipe","handleError","addMedicine","med","post","httpOptions","deleteMedicine","id","delete","updateMedicine","put","operation","result","error","console","factory","providedIn"],"sourceRoot":"","sources":["/home/luiza/Documents/proiectDBnou/Angular/src/app/services/medicine.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport {Medicine } from '../model/medicine';\n\n\n@Injectable({ providedIn: 'root' })\nexport class MedicineService {\n\n  private url = 'http://localhost:8080/medicines';  // URL to web api\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient) { }\n\n  /** GET clients from the server */\n  getMedicines(): Observable<Medicine[]> {\n    return this.http.get<Medicine[]>(this.url)\n      .pipe(\n        catchError(this.handleError<Medicine[]>('getMedicines', []))\n      );\n  }\n\n\n  //////// Save methods //////////\n\n  /** POST: add a new client to the server */\n  addMedicine(med: Medicine): Observable<Medicine> {\n    return this.http.post<Medicine>(this.url, med, this.httpOptions).pipe(\n      catchError(this.handleError<Medicine>('addMedicine'))\n    );\n  }\n\n  /** DELETE: delete the client from the server */\n  deleteMedicine(id: number): Observable<Medicine> {\n    const url = `${this.url}/${id}`;\n\n    return this.http.delete<Medicine>(url, this.httpOptions).pipe(\n      catchError(this.handleError<Medicine>('deleteMedicine'))\n    );\n  }\n\n  /** PUT: update the client on the server */\n  updateMedicine(med: Medicine): Observable<any> {\n    return this.http.put(this.url, med, this.httpOptions).pipe(\n      catchError(this.handleError<any>('updateMedicine'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}