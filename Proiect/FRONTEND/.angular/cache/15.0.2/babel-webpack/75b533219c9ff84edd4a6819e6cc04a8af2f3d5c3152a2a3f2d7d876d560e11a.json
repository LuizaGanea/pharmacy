{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ClientService {\n  constructor(http) {\n    this.http = http;\n    this.clientsUrl = 'api/clients'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET clients from the server */\n  getclients() {\n    return this.http.get(this.clientsUrl).pipe(catchError(this.handleError('getclients', [])));\n  }\n  /** GET client by id. Return `undefined` when id not found */\n  getclientNo404(id) {\n    const url = `${this.clientsUrl}/?id=${id}`;\n    return this.http.get(url).pipe(map(clients => clients[0]),\n    // returns a {0|1} element array\n    tap(h => {\n      const outcome = h ? 'fetched' : 'did not find';\n    }), catchError(this.handleError(`getclient id=${id}`)));\n  }\n  /** GET client by id. Will 404 if id not found */\n  getclient(id) {\n    const url = `${this.clientsUrl}/${id}`;\n    return this.http.get(url).pipe(catchError(this.handleError(`getclient id=${id}`)));\n  }\n  /* GET clients whose name contains search term */\n  searchclients(term) {\n    if (!term.trim()) {\n      // if not search term, return empty client array.\n      return of([]);\n    }\n    return this.http.get(`${this.clientsUrl}/?name=${term}`).pipe(catchError(this.handleError('searchclients', [])));\n  }\n  //////// Save methods //////////\n  /** POST: add a new client to the server */\n  addclient(client) {\n    return this.http.post(this.clientsUrl, client, this.httpOptions).pipe(catchError(this.handleError('addclient')));\n  }\n  /** DELETE: delete the client from the server */\n  deleteclient(id) {\n    const url = `${this.clientsUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(catchError(this.handleError('deleteclient')));\n  }\n  /** PUT: update the client on the server */\n  updateclient(client) {\n    return this.http.put(this.clientsUrl, client, this.httpOptions).pipe(catchError(this.handleError('updateclient')));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function ClientService_Factory(t) {\n    return new (t || ClientService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClientService,\n    factory: ClientService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","map","tap","ClientService","constructor","http","headers","getclients","get","clientsUrl","pipe","handleError","getclientNo404","id","url","clients","h","outcome","getclient","searchclients","term","trim","addclient","client","post","httpOptions","deleteclient","delete","updateclient","put","operation","result","error","console","factory","providedIn"],"sourceRoot":"","sources":["/home/luiza/Documents/proiectDBnou/Angular/src/app/client.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { Client } from './client';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClientService {\r\n\r\n  private clientsUrl = 'api/clients';  // URL to web api\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient) { }\r\n\r\n  /** GET clients from the server */\r\n  getclients(): Observable<Client[]> {\r\n    return this.http.get<Client[]>(this.clientsUrl)\r\n      .pipe(\r\n        catchError(this.handleError<Client[]>('getclients', []))\r\n      );\r\n  }\r\n\r\n  /** GET client by id. Return `undefined` when id not found */\r\n  getclientNo404<Data>(id: number): Observable<Client> {\r\n    const url = `${this.clientsUrl}/?id=${id}`;\r\n    return this.http.get<Client[]>(url)\r\n      .pipe(\r\n        map(clients => clients[0]), // returns a {0|1} element array\r\n        tap(h => {\r\n          const outcome = h ? 'fetched' : 'did not find';\r\n        }),\r\n        catchError(this.handleError<Client>(`getclient id=${id}`))\r\n      );\r\n  }\r\n\r\n  /** GET client by id. Will 404 if id not found */\r\n  getclient(id: number): Observable<Client> {\r\n    const url = `${this.clientsUrl}/${id}`;\r\n    return this.http.get<Client>(url).pipe(\r\n      catchError(this.handleError<Client>(`getclient id=${id}`))\r\n    );\r\n  }\r\n\r\n  /* GET clients whose name contains search term */\r\n  searchclients(term: string): Observable<Client[]> {\r\n    if (!term.trim()) {\r\n      // if not search term, return empty client array.\r\n      return of([]);\r\n    }\r\n    return this.http.get<Client[]>(`${this.clientsUrl}/?name=${term}`).pipe(\r\n      catchError(this.handleError<Client[]>('searchclients', []))\r\n    );\r\n  }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /** POST: add a new client to the server */\r\n  addclient(client: Client): Observable<Client> {\r\n    return this.http.post<Client>(this.clientsUrl, client, this.httpOptions).pipe(\r\n      catchError(this.handleError<Client>('addclient'))\r\n    );\r\n  }\r\n\r\n  /** DELETE: delete the client from the server */\r\n  deleteclient(id: number): Observable<Client> {\r\n    const url = `${this.clientsUrl}/${id}`;\r\n\r\n    return this.http.delete<Client>(url, this.httpOptions).pipe(\r\n      catchError(this.handleError<Client>('deleteclient'))\r\n    );\r\n  }\r\n\r\n  /** PUT: update the client on the server */\r\n  updateclient(client: Client): Observable<any> {\r\n    return this.http.put(this.clientsUrl, client, this.httpOptions).pipe(\r\n      catchError(this.handleError<any>('updateclient'))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   *\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/"]},"metadata":{},"sourceType":"module","externalDependencies":[]}