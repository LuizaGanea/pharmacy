{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SaleService {\n  constructor(http) {\n    this.http = http;\n    this.salesUrl = 'http://localhost:8080/sales'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET sales from the server */\n  getSales() {\n    return this.http.get(this.salesUrl).pipe(catchError(this.handleError('getSales', [])));\n  }\n  /** GET sale by id. Will 404 if id not found */\n  getSale(id) {\n    const url = `${this.salesUrl}/${id}`;\n    return this.http.get(url).pipe(catchError(this.handleError(`getSale id=${id}`)));\n  }\n  //////// Save methods //////////\n  /** POST: add a new sale to the server */\n  addSale(sale) {\n    return this.http.post(this.salesUrl, sale, this.httpOptions).pipe(catchError(this.handleError('addSale')));\n  }\n  /** DELETE: delete the sale from the server */\n  deleteSale(id) {\n    const url = `${this.salesUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(catchError(this.handleError('deleteSale')));\n  }\n  /** PUT: update the Sale on the server */\n  updateSale(sale) {\n    return this.http.put(this.salesUrl, sale, this.httpOptions).pipe(catchError(this.handleError('updateSale')));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // alert(error);\n      // TODO: better job of transforming error for user consumption\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function SaleService_Factory(t) {\n    return new (t || SaleService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SaleService,\n    factory: SaleService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAkB,gBAAgB;;;AAMrD,OAAM,MAAOC,WAAW;EAQtBC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAPN,aAAQ,GAAG,6BAA6B,CAAC,CAAE;IAEnD,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIN,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAG6B;EAE9B;EACAO,QAAQ;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACC,QAAQ,CAAC,CACxCC,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAS,UAAU,EAAE,EAAE,CAAC,CAAC,CACrD;EACL;EAEA;EACAC,OAAO,CAACC,EAAU;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,QAAQ,IAAII,EAAE,EAAE;IACpC,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAOM,GAAG,CAAC,CAACJ,IAAI,CAClCR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAO,cAAcE,EAAE,EAAE,CAAC,CAAC,CACvD;EACH;EAEA;EAEA;EACAE,OAAO,CAACC,IAAU;IAChB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAO,IAAI,CAACR,QAAQ,EAAEO,IAAI,EAAE,IAAI,CAACE,WAAW,CAAC,CAACR,IAAI,CACrER,UAAU,CAAC,IAAI,CAACS,WAAW,CAAO,SAAS,CAAC,CAAC,CAC9C;EACH;EAEA;EACAQ,UAAU,CAACN,EAAU;IACnB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,QAAQ,IAAII,EAAE,EAAE;IAEpC,OAAO,IAAI,CAACR,IAAI,CAACe,MAAM,CAAON,GAAG,EAAE,IAAI,CAACI,WAAW,CAAC,CAACR,IAAI,CACvDR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAO,YAAY,CAAC,CAAC,CACjD;EACH;EAEA;EACAU,UAAU,CAACL,IAAU;IACnB,OAAO,IAAI,CAACX,IAAI,CAACiB,GAAG,CAAC,IAAI,CAACb,QAAQ,EAAEO,IAAI,EAAE,IAAI,CAACE,WAAW,CAAC,CAACR,IAAI,CAC9DR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAM,YAAY,CAAC,CAAC,CAChD;EACH;EAEA;;;;;;;EAOQA,WAAW,CAAIY,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MACvB;MAEC;MAEA;MACA,OAAOxB,EAAE,CAACuB,MAAW,CAAC;IACxB,CAAC;EACH;EAAC;qBAvEUrB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAwB,SAAXxB,WAAW;IAAAyB,YADE;EAAM","names":["HttpHeaders","of","catchError","SaleService","constructor","http","headers","getSales","get","salesUrl","pipe","handleError","getSale","id","url","addSale","sale","post","httpOptions","deleteSale","delete","updateSale","put","operation","result","error","console","factory","providedIn"],"sourceRoot":"","sources":["/home/luiza/Documents/proiectDBnou/Angular/src/app/services/sale.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Sale } from '../model/sale';\n\n\n@Injectable({ providedIn: 'root' })\nexport class SaleService {\n\n  private salesUrl = 'http://localhost:8080/sales';  // URL to web api\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient) { }\n\n  /** GET sales from the server */\n  getSales(): Observable<Sale[]> {\n    return this.http.get<Sale[]>(this.salesUrl)\n      .pipe(\n        catchError(this.handleError<Sale[]>('getSales', []))\n      );\n  }\n\n  /** GET sale by id. Will 404 if id not found */\n  getSale(id: number): Observable<Sale> {\n    const url = `${this.salesUrl}/${id}`;\n    return this.http.get<Sale>(url).pipe(\n      catchError(this.handleError<Sale>(`getSale id=${id}`))\n    );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add a new sale to the server */\n  addSale(sale: Sale): Observable<Sale> {\n    return this.http.post<Sale>(this.salesUrl, sale, this.httpOptions).pipe(\n      catchError(this.handleError<Sale>('addSale'))\n    );\n  }\n\n  /** DELETE: delete the sale from the server */\n  deleteSale(id: number): Observable<Sale> {\n    const url = `${this.salesUrl}/${id}`;\n\n    return this.http.delete<Sale>(url, this.httpOptions).pipe(\n      catchError(this.handleError<Sale>('deleteSale'))\n    );\n  }\n\n  /** PUT: update the Sale on the server */\n  updateSale(sale: Sale): Observable<any> {\n    return this.http.put(this.salesUrl, sale, this.httpOptions).pipe(\n      catchError(this.handleError<any>('updateSale'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n     // alert(error);\n\n      // TODO: better job of transforming error for user consumption\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}